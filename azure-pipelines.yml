trigger:
  - main

# Variables that will be used throughout the pipeline
variables:
  # Name of your Azure Container Registry (e.g., mydevopsacr123)
  acrName: 'mydevopsacr123' # IMPORTANT: Replace with your actual ACR name
  # Name of your AKS cluster
  aksClusterName: 'myakscluster' # IMPORTANT: Replace with your actual AKS cluster name
  # Resource group where your AKS cluster is located
  resourceGroup: 'myaksresourcegroup' # IMPORTANT: Replace with your actual AKS resource group name
  # Name of the Docker image (lowercase)
  imageName: 'hello-world-app'
  # Tag for the Docker image, using the Azure DevOps Build ID for uniqueness
  imageTag: '$(Build.BuildId)'
  # The name of the Service Connection to your Azure Subscription created in prerequisites
  azureServiceConnection: 'AzureSubscriptionConnection' # IMPORTANT: Replace with your actual Service Connection name

# Define the stages of your pipeline
stages:
- stage: Build
  displayName: 'Build and Push Docker Image'
  jobs:
  - job: BuildAndPush
    displayName: 'Build and Push to ACR'
    pool:
      vmImage: 'ubuntu-latest' # Use an Ubuntu agent for the build

    steps:
    - task: Docker@2
      displayName: 'Build and push an image to ACR'
      inputs:
        containerRegistry: $(acrName) # This uses the ACR name for authentication context
        repository: $(imageName) # The name for your Docker image
        command: 'buildAndPush' # Command to build and push the image
        Dockerfile: 'Dockerfile' # Path to your Dockerfile
        tags: |
          $(imageTag) # Tag the image with the build ID
          latest # Also tag it as 'latest' (optional, but common for development)

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Kubernetes Manifests'
      inputs:
        # Path to the directory containing your K8s YAML files
        pathToPublish: '$(Build.SourcesDirectory)/k8s'
        artifactName: 'kubernetes-manifests' # Name of the artifact
        publishLocation: 'Container' # Publish to Azure Pipelines artifact storage

- stage: Deploy
  displayName: 'Deploy to AKS'
  dependsOn: Build # This stage depends on the Build stage completing successfully
  jobs:
  - deployment: DeployToAKS
    displayName: 'Deploy Application to AKS'
    environment: 'development' # Optional: Environment name for tracking
    pool:
      vmImage: 'ubuntu-latest' # Use an Ubuntu agent for deployment

    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            displayName: 'Download Kubernetes Manifests'
            inputs:
              buildType: 'current'
              artifactName: 'kubernetes-manifests'
              targetPath: '$(Pipeline.Workspace)/manifests' # Download to a specific path

          - task: KubernetesManifest@1
            displayName: 'Deploy to Kubernetes cluster'
            inputs:
              action: 'deploy' # Action to perform (deploy, create, delete, etc.)
              connectionType: 'azureResourceManager' # Connect using Azure Service Connection
              azureSubscriptionConnection: $(azureServiceConnection) # Your Service Connection name
              kubernetesCluster: $(aksClusterName) # Your AKS cluster name
              resourceGroup: $(resourceGroup) # Resource group of your AKS cluster
              # Update the image in the deployment.yaml to point to the ACR image
              # This finds and replaces the placeholder in the deployment.yaml
              # It inserts the full ACR path and the build ID as the image tag
              imagePullSecrets: 'acr-secret' # Important: Create this secret in your K8s cluster if not using service principal
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yaml
                $(Pipeline.Workspace)/manifests/service.yaml
              containers: |
                $(acrName).azurecr.io/$(imageName):$(imageTag)
              # Set the 'kubectl rollout status' to check for deployment readiness
              rolloutStatusTimeout: '300' # Timeout for rollout status check in seconds
